{"pages":[{"title":"关于我","permalink":"https://www.miaomiaomiao.info/about/index.html","text":"QQ: 1178574705 邮箱: zyzeng1234@gmail.com"}],"posts":[{"title":"","permalink":"https://www.miaomiaomiao.info/qq29DAAE6204D5BBA527F29E43E00393AF/e04c6d7f4bc94da793b04bde9fdf4934/后半部分/","text":"5.后端工程目录结构如图：包依次为 配置类（解决跨域问题），DAO类，全局处理异常类，实体类，服务类（封装DAO类），工具类（页码效果，登录成功失败的返回结果类），控制器类（映射地址路径，接受请求），操作数据库是利用的springboot的jpa来实现的，jpa相当于是将hibernate的高度封装，无需配置直接使用。 5.1 分类管理 首先创建实体类Category,利用注解标注该类为实体类，并标注对应的数据库中的表名category，主键字段名id 1234567891011121314151617181920212223242526@Entity@Table(name = &quot;category&quot;)@JsonIgnoreProperties(&#123; &quot;handler&quot;,&quot;hibernateLazyInitializer&quot; &#125;)public class Category &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = &quot;id&quot;) int id; String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 创建CategoryDAO接口并继承JpaRepository&lt;Category,Integer&gt;。 123public interface CategoryDAO extends JpaRepository&lt;Category,Integer&gt;&#123;&#125; 创建服务类CategoryService，将CategoryDAO中需要用到的操作比如增删改查在服务类中进行装饰。 123456789101112131415161718192021222324252627282930313233@Servicepublic class CategoryService &#123; @Autowired CategoryDAO categoryDAO; public Page4Navigator&lt;Book&gt; list(int start, int size, int navigatePages) &#123; Sort sort = new Sort(Sort.Direction.DESC, &quot;id&quot;); Pageable pageable = new PageRequest(start, size,sort); Page pageFromJPA =categoryDAO.findAll(pageable); //categoryDAO.findAll方法返回的结果就是一个page对象。当然是jpa中封装好的方法 return new Page4Navigator&lt;&gt;(pageFromJPA,navigatePages); //return pageFromJPA; &#125; public List&lt;Category&gt; list() &#123; //Spring中的sort类，规定一个按某值的排列顺序 Sort sort = new Sort(Sort.Direction.DESC, &quot;id&quot;); return categoryDAO.findAll(sort); &#125; public void add(Category bean)&#123; categoryDAO.save(bean); &#125; public void delete(int id)&#123; categoryDAO.delete(id); &#125; public Category get(int id)&#123; Category c = categoryDAO.findOne(id); return c; &#125; public void update(Category c)&#123; categoryDAO.save(c); &#125;&#125;"},{"title":"","permalink":"https://www.miaomiaomiao.info/springboot踩坑录/","text":""},{"title":"","permalink":"https://www.miaomiaomiao.info/homework/","text":"homework###"},{"title":"","permalink":"https://www.miaomiaomiao.info/android中遇到的坑总结/","text":"在fragment中，findviewbyid及组件监听事件要写在onactivitycreated方法中，不然会报空指针异常。"},{"title":"","permalink":"https://www.miaomiaomiao.info/服务器端与android登录注册/","text":"Android与服务器端的通信实现登录注册配置服务器环境 首先服务器是搬瓦工的centos6 64位，配置java web环境即配置jdk，安装tomcat以及mysql按照这篇帖子搬瓦工java环境搭建 注意要删除自带的mysql的两个文件夹。 服务器端代码编写 主要写三个方面： 数据库 LoginServlet RegisterServlet 服务器mysql部分首先在服务器的mysql创建一个命名为zeng再创建一个表，命名为user，用来存储android端注册成功的用户信息记得进行授权：123//例如，你想root用户使用mypassword从任何主机连接到mysql服务器的话。GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;服务器mysql密码&apos; WITH GRANT OPTION;FLUSH PRIVILEGES; 配置连接数据库的信息, 12345public static final String DB_USER = &quot;root&quot;;//数据库用户名public static final String DB_PASSWORD = &quot;******&quot;;//数据库密码public static final String DB_DATABASE = &quot;zeng&quot;;//数据库名public static final String DB_URL = &quot;jdbc:mysql://104.243.30.196:3306/zeng&quot;;//jdbc地址:服务器ip+数据库名public static final String DB_JDBC_MYSQL = &quot;com.mysql.jdbc.Driver&quot;;//jdbc mysql 封装数据库jdbc连接方法，创建表以及增删改查的方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182public class DBUtils &#123;private Connection connection = null;private Statement statement = null;public DBUtils() &#123;&#125;public DBUtils(String jdbc, String url, String user, String password) &#123; try &#123; Class.forName(jdbc); connection = DriverManager.getConnection(url, user, password); statement = connection.createStatement(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;/** * 创建表 * @param createSql */public void createTable(String createSql) &#123; try &#123; statement.execute(createSql); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;/** * 插入数据 * @param table * @param columns * @param args * @return */public int insert(String table, String[] columns, String[] args) &#123; if(columns != null &amp;&amp; columns.length == 0) &#123; return -1; &#125; if(args != null &amp;&amp; columns.length != args.length) &#123; return -1; &#125; StringBuilder sql = new StringBuilder(); sql.append(&quot;INSERT INTO &quot;); sql.append(table + &quot;(&quot;); for(int i = 0; i &lt; columns.length - 1;i++) &#123; sql.append(columns[i]); sql.append(&quot;,&quot;); &#125; sql.append(columns[columns.length - 1]); sql.append(&quot;) VALUES(&quot;); for (int i = 0; i &lt; args.length - 1; i++) &#123; sql.append(&quot;?,&quot;); &#125; sql.append(&quot;?)&quot;); ResultSet rs = null; try &#123; PreparedStatement preparedStatement = connection.prepareStatement(sql.toString(),Statement.RETURN_GENERATED_KEYS); for (int i = 1; i &lt;= args.length; i++) &#123; preparedStatement.setString(i, args[i - 1]); &#125; preparedStatement.executeUpdate(); rs = preparedStatement.getGeneratedKeys(); if (rs.next()) &#123; return rs.getInt(1); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally &#123; if (rs != null) &#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return -1;&#125; 创建数据库管理类DBMannager，包括创建表，对获取的用户email，密码写入数据库。其中要对数据进行json处理5."},{"title":"","permalink":"https://www.miaomiaomiao.info/android备忘录app开发/","text":"android备忘录开发 first day1.需求分析主要用于学生，特别是大学生和研究生经常忘记老师的作业，但他们又不习惯在纸上记录作业。但手机是他们每天必看的，因此设计一款app实现作业记录与提醒并对每科目开放一个聊天室供学习交流。 2.原型设计原型设计由mocplus设计 3.表设计"},{"title":"组件","permalink":"https://www.miaomiaomiao.info/Android第三天/","text":"一、编辑框1234567&lt;EditText android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_parent&quot; android:hint=&quot;请输入名字&quot; //输入框中的提示信息 android:drawableLeft=&quot;@mipmap/&quot; //将图像放在mipmap中 android:lines=&quot;5&quot; android:inputType=&quot;textPassword&quot;/&gt; //输入框中密码 属性drawableLeft实现在编辑框中的左侧放置图片如下图： 二、buttom按钮组件 属性： 123android:layout_width=&quot;wrap_parent&quot;android:layout_height=&quot;wrap_parent&quot;android:text=&quot;按钮&quot; 事件监听器 123456Buttom b = (Buttom)findViewById(R.id.xx);b.setOnClickListener(new View.OnClickListener()&#123; public void onclick(View v)&#123; 写事件 &#125; &#125;) 三、ImageButtom图片按钮12android:src=&quot;@mipmap/xx&quot;android:background=&quot;#0000&quot; //设置背景透明，不然图片背景有灰色 四、RadioButton单选按钮和按钮组12android:text=&quot;xx&quot; //单选框后的文字android:checked=&quot;true&quot; //设置默认选中 将多个RadioButton用RadioButtonGroup组括起来才能实现单选的效果，即：123456789&lt;RadioButtonGroup android:id=&quot;@+id/xxx&quot; android:layout_width=&quot;wrap_parent&quot; android:layout_height=&quot;wrap_parent&quot;/&gt; &lt;RadioButton xxx/&gt; &lt;RadioButton xxx/&gt;&lt;/RadioButton&gt; Java代码：`RadioGroup rg = (RadioGroup)findViewById(R.id.xx)rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){ public void OnCheckedChange(RadioGroup group,int checkedID){ RadioButton r=(RadioButton)findViewById(checkedID); //通过参数checkedID取出所选单选框 r.getText(); //获取所选单选框的文本内容 } })"},{"title":"高级组件","permalink":"https://www.miaomiaomiao.info/android第五天/","text":"进度条组件 布局文件12345678910&lt;ProgressBar android:id=&quot;@+id/progressBar1&quot; style=&quot;@android:style/Widget.ProgressBar.Horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;25dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_alignParentStart=&quot;true&quot; android:layout_marginBottom=&quot;60dp&quot; android:max=&quot;100&quot; /&gt; //设置最大值 样式通过style属性进行设置： java代码 使用handler发送消息来控制进度条完成 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 private ProgressBar horizonP; //水平进度条 private int mProgressStatus = 0; //完成进度 private Handler mHandler; //声明一个用于处理消息的Handler类的对象 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); //设置全屏显示 horizonP = (ProgressBar) findViewById(R.id.progressBar1); //获取水平进度条 mHandler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; if (msg.what == 0x111) &#123; horizonP.setProgress(mProgressStatus); //更新进度 &#125; else &#123; Toast.makeText(MainActivity.this, &quot;耗时操作已经完成&quot;, Toast.LENGTH_SHORT).show(); horizonP.setVisibility(View.GONE); //设置进度条不显示，并且不占用空间 &#125; &#125; &#125;; new Thread(new Runnable() &#123; public void run() &#123; while (true) &#123; mProgressStatus = doWork(); //获取耗时操作完成的百分比 Message m = new Message(); if (mProgressStatus &lt; 100) &#123; m.what = 0x111; mHandler.sendMessage(m); //发送信息 &#125; else &#123; m.what = 0x110; mHandler.sendMessage(m); //发送消息 break; &#125; &#125; &#125; //模拟一个耗时操作 private int doWork() &#123; mProgressStatus += Math.random() * 10; //改变完成进度 try &#123; Thread.sleep(200); //线程休眠200毫秒 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return mProgressStatus; //返回新的进度 &#125; &#125;).start(); //开启一个线程 &#125;&#125; 拖动条组件1234567&lt;SeekBar android:id=&quot;@+id/seekbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:max=&quot;255&quot; //最大值 android:progress=&quot;255&quot; //默认值 /&gt; java代码 实现通过拉动拖动条改变图片透明度：123456789101112131415161718192021222324252627public class MainActivity extends AppCompatActivity &#123; private ImageView image; //定义图片 private SeekBar seekBar; //定义拖动条 @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); image = (ImageView) findViewById(R.id.image); //获取图片 seekBar = (SeekBar) findViewById(R.id.seekbar); //获取拖动条 //为拖动条设置监听事件 seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() &#123; // 当拖动条的滑块位置发生改变时触发该方法 @Override public void onProgressChanged(SeekBar arg0, int progress, boolean fromUser) &#123; // 动态改变图片的透明度 image.setImageAlpha(progress); &#125; @Override public void onStartTrackingTouch(SeekBar bar) &#123; &#125; @Override public void onStopTrackingTouch(SeekBar bar) &#123; &#125; &#125;); &#125;&#125; 图像视图1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package com.mingrisoft;import android.app.Activity;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.animation.AnimationUtils;import android.widget.ImageSwitcher;import android.widget.ImageView;import android.widget.ViewSwitcher;public class MainActivity extends Activity &#123; private int[] arrayPictures = new int[]&#123;R.mipmap.img01, R.mipmap.img02, R.mipmap.img03, R.mipmap.img04, R.mipmap.img05, R.mipmap.img06, R.mipmap.img07, R.mipmap.img08, R.mipmap.img09, &#125;;// 声明并初始化一个保存要显示图像ID的数组 private ImageSwitcher imageSwitcher; // 声明一个图像切换器对象 //要显示的图片在图片数组中的Index private int pictutureIndex; //左右滑动时手指按下的X坐标 private float touchDownX; //左右滑动时手指松开的X坐标 private float touchUpX; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);//设置全屏显示 imageSwitcher = (ImageSwitcher) findViewById(R.id.imageswitcher); // 获取图像切换器 //为ImageSwicher设置Factory，用来为ImageSwicher制造ImageView imageSwitcher.setFactory(new ViewSwitcher.ViewFactory() &#123; @Override public View makeView() &#123; ImageView imageView = new ImageView(MainActivity.this); // 实例化一个ImageView类的对象 imageView.setImageResource(arrayPictures[pictutureIndex]);//根据id加载默认显示图片 return imageView; // 返回imageView对象 &#125; &#125;); imageSwitcher.setOnTouchListener(new View.OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; if (event.getAction() == MotionEvent.ACTION_DOWN) &#123; //取得左右滑动时手指按下的X坐标 touchDownX = event.getX(); return true; &#125; else if (event.getAction() == MotionEvent.ACTION_UP) &#123; //取得左右滑动时手指松开的X坐标 touchUpX = event.getX(); //从左往右，看下一张 if (touchUpX - touchDownX &gt; 100) &#123; //取得当前要看的图片的index pictutureIndex = pictutureIndex == 0 ? arrayPictures.length - 1 : pictutureIndex - 1; //设置图片切换的动画 imageSwitcher.setInAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_in_left)); imageSwitcher.setOutAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_out_right)); //设置当前要看的图片 imageSwitcher.setImageResource(arrayPictures[pictutureIndex]); //从右往左，看上一张 &#125; else if (touchDownX - touchUpX &gt; 100) &#123; //取得当前要看的图片index pictutureIndex = pictutureIndex == arrayPictures.length - 1 ? 0 : pictutureIndex + 1; //设置切换动画 imageSwitcher.setOutAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_out_left)); imageSwitcher.setInAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.slide_in_right)); //设置要看的图片 imageSwitcher.setImageResource(arrayPictures[pictutureIndex]); &#125; return true; &#125; return false; &#125; &#125;); &#125;&#125; 图像切换器"},{"title":"普通组件","permalink":"https://www.miaomiaomiao.info/Android第四天/","text":"日期选择器日期选择器即在需要记录日期的时候弹出日期选择界面，如下图：1234&lt;DatePicker android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;/DatePicker&gt; 在java代码中获取所选日期123456789101112131415161718192021datepicker = (DatePicker)findViewById(R.id.xx)Calendar calendar = Calendar.getInstance();//下面的定义为给datePicker.init中初始化的值，当前的年月日year=calendar.get(Calendar.YEAR);mouth=calendar.get(Calendar.mouth);day=calendar.get(Calendar.DAY_OF_MOUTH);datePicker.init(year,mouth,day, new DatePicker.OnDatechangedListener()&#123; public void OnDatechanged(DatePicker view,int year,int mouthofyear,int day of mouth)&#123; MainActivity.this.year=year; //将监听事件中的年月日的值赋给这个activity中 MainActivity.this.month=mouthofyear; //的年月日 MainActivity.this.day=dayofmouth; &#125; &#125;);//定义一个show方法用toast来显示所选年月日private void show(int year,int mouth,int day)&#123; String str= year+&quot;年&quot;+mouth+1+&quot;月&quot;+day+&quot;日&quot;； Toast.makeText(MainActivity.this,strt,Toast.LENGTH_SHOW).show();&#125; 时间选择器如图：123&lt;TimePicker xxxxx&gt;&lt;/TimePicker&gt;"},{"title":"布局layout","permalink":"https://www.miaomiaomiao.info/Android第二天/","text":"Android布局一、relativeLayout 相对布局两个属性 android:gravity android:ingnoreGrivaty 组件属性123456android:layout_toLeftOf=&quot;@id/&quot;android:layout_toRightOf=&quot;@id/&quot;android:layout_belowandroid:layout_width=&quot;match_parent&quot; 匹配父控件宽度即relativeLayout。android:layout_alignParentRight=&quot;true&quot; 与父控件右端对齐android:layout_marginRight=&quot;50dp&quot; 并与右边相距50dp 二、LinearLayout 线性布局管理器两个属性12345android:orientation=&quot;vertical&quot;android:orientation=&quot;horizontal&quot;android:gravity=“center”android:gravity=“right” “right|bottom” //右下android:paddingBottom=&quot;20dp&quot;整个布局器占手机荧幕的边距。 前两个是指里面组件（如4个按钮）的排列方式为水平或垂直。gravity为里面组件整体所在的位置排列。如设为center则里面的按钮都在中间 三、FrameLayout 帧布局管理器两个属性12android:foreground //设置一个覆盖于前端的图片android:foregroundLayout 四、GridLayout 网格布局管理器两个属性123android:columnCount=“2” //指定网格最大列数，如5个按钮，设置为2，则2个换行android:orientation //不设置默认水平排列android:rowCount 组件内属性1234android:layout_columnandroid:layout_row 手动操作每个组件位于第几行几列android:layout_rowspanandroid:layout_gravity=&quot;fill&quot; 这两条表示跨行显示 五、布局管理器的嵌套"},{"title":"布局layout","permalink":"https://www.miaomiaomiao.info/springboot图书馆/","text":"本次图书馆管理系统开发过程：1.分析表关系表关系比较简单，图书与图书分类为多对一关系，借阅书目与用户为多对一关系，借阅书目与书籍为多对一关系（实际上并没有用到这层关系，因为并没有做前台的借书功能(′Д`)）sql语句贴出一个借阅书目的，数据库用的是MySQL： create table orderbook( id int(11) not null auto_increment, name varchar(255) default null, uid int(11) default null, bid int(11) default null, borrowdate timestamp default CURRENT_TIMESTAMP, constraint pk_orderbook_user foreign key (uid) references user (id), constraint pk_orderbook_book foreign key (bid) references book (id), primary key(id) )engine=innodb default charset=utf8; 建立之后如图： 配置springboot配置文件springboot的配置文件主要用来写入数据库驱动用户名密码和其他一些配置 #database spring.datasource.url=jdbc:mysql://127.0.0.1:3306/library_manage?characterEncoding=UTF-8 spring.datasource.username=root spring.datasource.password=admin spring.datasource.driver-class-name=com.mysql.jdbc.Driver spring.jpa.hibernate.ddl-auto = none #thymeleaf spring.thymeleaf.mode=LEGACYHTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.content-type=text/html spring.thymeleaf.cache=false #context,页面地址访问就以localhost:8080/开头， #server.context-path=/library,则以localhost:8080/library开头 server.context-path=/ #设置上传文件大小，默认只有1 m spring.http.multipart.maxFileSize=100Mb spring.http.multipart.maxRequestSize=100Mb #jpa对实体类的默认字段会把驼峰命名的属性，转换为字段名的时候自动加上下划线。 这个配置的作用就是去掉下划线 #比如属性名称是 createDate, jpa 默认转换为字段名 create_Date。 有了这个配置之后，就会转换为同名字段 createDate spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #显示 hibernate运行的 sql 语句 spring.jpa.show-sql=true 3.前端部分前端部分采用的是thymeleaf模板引擎和vue.js渲染页面数据和绑定数据（vue这里仅仅是用到了这两个功能，没有用到脚手架），前端样式采用的bootstrap。 3.1 thymeleaf将网页模块化如图，页面目录如下： admin目录下的页面分别： listCategory.html: 显示所有书籍分类的列表 editCategory.html: 编辑书籍名字的页面 listBook.html: 显示分类下书籍列表的页面 listOrderBook.html: 显示每个用户下借阅书籍列表的页面 listOrderAll.html: 显示所有借阅的书籍的页面 listUser.html：显示所有用户列表的页面 login.html: 登录页面 include/admin目录下的页面分别为： adminHeader.html: 将所有前端页面中用到的一些函数统一写到了这个页面里 adminNavigator.html 基本每个页面都有的导航栏放在这个页面里 adminPage.html 分页跳转方法写在这个页面里 adminFooter.html 页脚 这样可以使得将页面中通用的部分单独拿出来，通过thymeleaf进行镶嵌 利用thymeleaf将include/admin中的页面嵌入到admin里的页面中，如下： 12345678910111213&lt;!DOCTYPE html&gt; &lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; &lt;head th:include=&quot;include/admin/adminHeader::html(&apos;分类管理&apos;)&quot; &gt;&lt;/head&gt; //在head中插入adminHeader.html &lt;body&gt; &lt;div th:replace=&quot;include/admin/adminNavigator::html&quot; &gt;&lt;/div&gt; //在body的一开头插入导航栏adminNavigator.html &lt;div id=&quot;workingplace&quot;&gt; 此处省略一万行 &lt;div th:replace=&quot;include/admin/adminPage::html&quot; &gt;&lt;/div&gt; //插入分页 &lt;/div&gt; &lt;div th:replace=&quot;include/admin/adminFooter::html&quot; &gt;&lt;/div&gt; &lt;/body&gt; adminHeader内包含所需要的外部js文件已经css文件，代码如下： &lt;template th:fragment=&quot;html(title)&quot; &gt; &lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/vue/2.5.16/vue.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/axios/0.17.1/axios.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/moment/2.22.2/moment.js&quot;&gt;&lt;/script&gt; &lt;!-- vue.js 格式化日期用的 --&gt; &lt;link href=&quot;css/back/style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script&gt; //判断是否为空 function checkEmpty(value,text){ if(null==value || value.length==0){ alert(text+ &quot;不能为空&quot;); return false; } return true; } ... //此处省略 ... &lt;/script&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title th:text=&quot;${title}&quot; &gt;&lt;/title&gt; &lt;/template&gt; template标签配合th:include可以实现加载template模板中的内容，template标签加载后自动忽略。而th:replace则是配合div标签自动将当前的div替换为th:replace的div标签 adminNavigator.html的代码 &lt;div class=&quot;navitagorDiv&quot; th:fragment=&quot;html&quot;&gt; &lt;nav class=&quot;navbar navbar-default navbar-fixed-top navbar-inverse&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;img style=&quot;margin-left:10px;margin-right:0px&quot; class=&quot;pull-left navbar-brand&quot; src=&quot;img/site/library.jpg&quot; height=&quot;45px&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_login&quot;&gt;图书馆管理后台&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_category_list&quot;&gt;分类管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_user_list&quot;&gt;用户管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_orderall_list&quot;&gt;借阅管理&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/div&gt; 分类列表中的代码片段： 如上，通过镶嵌，这样每个页面就有一个导航栏 3.2 vue进行页面数据渲染以listCategory.hmtl书籍分类列表页面为例： 上图部分html代码如下： &lt;div id=&quot;workingArea&quot; &gt; &lt;div class=&quot;listDataTableDiv&quot;&gt; &lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;success&quot;&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;分类名称&lt;/th&gt; &lt;th&gt;书籍管理&lt;/th&gt; &lt;th&gt;编辑&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;bean in beans &quot;&gt; &lt;td&gt;{{bean.id}}&lt;/td&gt; &lt;td&gt; {{bean.name}} &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_book_list?cid=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_category_edit?id=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;deleteBean(bean.id)&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input @keyup.enter=&quot;add&quot; v-model.trim=&quot;bean.name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;add&quot; class=&quot;btn btn-success&quot;&gt;提交&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div th:replace=&quot;include/admin/adminPage::html&quot; &gt;&lt;/div&gt; &lt;/div&gt; 由一个存放书籍列表的表格table，和一个显示添加书籍的表格组成。 vue脚本部分： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;script&gt; $(function()&#123; var data4Vue = &#123; uri:&apos;categories&apos;, pagination:&#123;&#125;, beans: [], bean:&#123;id:0,name:&quot;&quot;&#125;, file:null, keyword:&apos;&apos; &#125;; //ViewModel var vue = new Vue(&#123; el: &apos;#workingArea&apos;, data: data4Vue, mounted:function()&#123; //mounted 表示这个 Vue 对象加载成功了 this.list(0); &#125;, methods: &#123; list:function(start)&#123; var url = this.uri+ &quot;?start=&quot;+start; axios.get(url).then(function(response) &#123; vue.pagination = response.data; vue.beans = response.data.content; &#125;); &#125;, listSearch:function () &#123; var url = &quot;search?keyword=&quot;+vue.keyword; axios.post(url).then(function (response) &#123; vue.beans = response.data; &#125;) &#125;, jump: function(page)&#123; jump(page,vue); //定义在adminHeader.html 中 &#125;, jumpByNumber: function(start)&#123; jumpByNumber(start,vue); &#125;, add: function () &#123; var url = this.uri; axios.post(url,vue.bean).then(function () &#123; vue.list(0); vue.bean = &#123;id:0,name:&apos;&apos;,hp:&apos;0&apos;&#125;; &#125;) &#125;, deleteBean:function (id) &#123; if(!checkDeleteLink()) return; var url = this.uri+&quot;/&quot;+id; axios.delete(url).then(function (response) &#123; if (0!=response.data.length) //rest规范删除数据要求要会返回空字符串（控制器中delete返回null），所以进行判断 alert(response.data); else vue.list(0); //是空字符串则调第一页 &#125;) &#125; &#125; &#125;); &#125;);&lt;/script&gt; 页面渲染流程如下： 其中： $()是jquery中的用法，表示页面html文档加载完毕后自动执行里面的脚本。 1$(function () &#123;。。。&#125;) var data4Vue是vue中定义的数据变量，也可以直接写在vue对象里 1234567var data4Vue = &#123; uri:&apos;categories&apos;, pagination:&#123;&#125;, beans: [], bean:&#123;id:0,name:&quot;&quot;&#125;, keyword:&apos;&apos; &#125;; vue里的el:#workingArea表示该vue对象是对id为workingArea的html标签区域进行数据渲染 mounted表示对象加载完毕时自动执行mounted里面的函数 methods在里面编写页面所需要的函数 methods里的list函数中 1234567list:function(start)&#123; var url = this.uri+ &quot;?start=&quot;+start; axios.get(url).then(function(response) &#123; vue.pagination = response.data; vue.beans = response.data.content; &#125;); &#125;, url为请求的地址，？后面为请求参数，服务器后端程序能通过注解自动识别？后的参数。 axios请求函数可以是get，post，delete等依情况定，请求成功后才会执行then里面的函数。then里面函数将返回的数据赋值给vue的数据变量中，vue通过在html标签中绑定的数据变量从而将数据渲染到页面中(请求的具体流程图在之后的后端部分给出)，如下，beans变量 123456789101112131415161718&lt;tbody&gt; &lt;tr v-for=&quot;bean in beans &quot;&gt; &lt;td&gt;&#123;&#123;bean.id&#125;&#125;&lt;/td&gt; &lt;td&gt; &#123;&#123;bean.name&#125;&#125; &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_book_list?cid=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_category_edit?id=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;deleteBean(bean.id)&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt; 输入框等表单用v-model双向绑定，即输入的内容会绑定到v-model后的数据变量里，同时数据变量值的改变也会改变表单中的值。 3.3页面样式样式主要采用bootstrap，在adminHeader.html引入 adminNavigator.html中导航栏样式 12345678910&lt;nav class=&quot;navbar navbar-default navbar-fixed-top navbar-inverse&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;img style=&quot;margin-left:10px;margin-right:0px&quot; class=&quot;pull-left navbar-brand&quot; src=&quot;img/site/library.jpg&quot; height=&quot;45px&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_login&quot;&gt;图书馆管理后台&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_category_list&quot;&gt;分类管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_user_list&quot;&gt;用户管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_orderall_list&quot;&gt;借阅管理&lt;/a&gt; &lt;/div&gt;&lt;/nav&gt; nav标签中的属性navbar navbar-default nvarbar-fixed-top navbar-inverse分别就是bootstrap样式中的导航栏，导航栏默认样式，固定不随页面滑动，颜色反转（本来是白色的） 页面中展示数据的表格所用的样式： 12&lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; 1&lt;tr class=&quot;success&quot;&gt; table：普通表格，table-striped：斑马线（颜色交替），table-border：列与列之间的分割线，table-hover：鼠标经过有效果，table-condensed：响应式效果，根据页面大小变换。行标签中有集中颜色可选，其中success为绿色 添加书籍分类的面板： 123456&lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; ..... ... panel：一个面板, panel-warning：颜色警告色（黄色）panel-heading：面板标题，body为面板内容面板里的内容为一个2x2的table构成 登录页面登录页面采用bootstrap中的栅格化布局（网上物色的登录界面，在css中改了背景）。基本思想是bootstrap将页面分成了12份利用class属性col-lg-xx来配置个标签所占位置 ，如图：所以标题输入框以及按钮class中都设置超过6的数值就会一行的一行的排列。input中的required属性表示不能为空，autofocus表示页面加载后自动获得焦点 12345678910111213141516171819202122232425262728&lt;form&gt; &lt;div class=&quot;mycenter&quot;&gt; &lt;div class=&quot;mysign&quot;&gt; &lt;div class=&quot;col-lg-11 text-center text-info&quot;&gt; &lt;h2&gt; 图书馆管理系统 &lt;/h2&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;input v-model=&quot;user.name&quot; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请输入账户名&quot; required autofocus/&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;input v-model=&quot;user.passWord&quot; type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; placeholder=&quot;请输入密码&quot; required/&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;button @click=&quot;login&quot; type=&quot;button&quot; id=&quot;btn&quot; class=&quot;btn btn-success col-lg-12&quot;&gt; 登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 4.静态文件路径设置改写css，图片，以及前端框架js文件的路径到resource/webapp路径下，在idea中如下设置setting -&gt; project structure -&gt;facets设置web resource directory &lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/vue/2.5.16/vue.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/axios/0.17.1/axios.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/moment/2.22.2/moment.js&quot;&gt;&lt;/script&gt; &lt;!-- vue.js 格式化日期用的 --&gt; &lt;link href=&quot;css/back/style.css&quot; rel=&quot;stylesheet&quot;&gt;"},{"title":"springboot","permalink":"https://www.miaomiaomiao.info/qq29DAAE6204D5BBA527F29E43E00393AF/e5e2ffa11d1943e6974c6a66863e8e05/前半部分/","text":"本次图书馆管理系统开发过程：1.分析表关系表关系比较简单，图书与图书分类为多对一关系，借阅书目与用户为多对一关系，借阅书目与书籍为多对一关系（实际上并没有用到这层关系，因为并没有做前台的借书功能(′Д`)）sql语句贴出一个借阅书目的，数据库用的是MySQL： create table orderbook( id int(11) not null auto_increment, name varchar(255) default null, uid int(11) default null, bid int(11) default null, borrowdate timestamp default CURRENT_TIMESTAMP, constraint pk_orderbook_user foreign key (uid) references user (id), constraint pk_orderbook_book foreign key (bid) references book (id), primary key(id) )engine=innodb default charset=utf8; 建立之后如图： 配置springboot配置文件springboot的配置文件主要用来写入数据库驱动用户名密码和其他一些配置 #database spring.datasource.url=jdbc:mysql://127.0.0.1:3306/library_manage?characterEncoding=UTF-8 spring.datasource.username=root spring.datasource.password=admin spring.datasource.driver-class-name=com.mysql.jdbc.Driver spring.jpa.hibernate.ddl-auto = none #thymeleaf spring.thymeleaf.mode=LEGACYHTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.content-type=text/html spring.thymeleaf.cache=false #context,页面地址访问就以localhost:8080/开头， #server.context-path=/library,则以localhost:8080/library开头 server.context-path=/ #设置上传文件大小，默认只有1 m spring.http.multipart.maxFileSize=100Mb spring.http.multipart.maxRequestSize=100Mb #jpa对实体类的默认字段会把驼峰命名的属性，转换为字段名的时候自动加上下划线。 这个配置的作用就是去掉下划线 #比如属性名称是 createDate, jpa 默认转换为字段名 create_Date。 有了这个配置之后，就会转换为同名字段 createDate spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #显示 hibernate运行的 sql 语句 spring.jpa.show-sql=true 3.前端部分前端部分采用的是thymeleaf模板引擎和vue.js渲染页面数据和绑定数据（vue这里仅仅是用到了这两个功能，没有用到脚手架），前端样式采用的bootstrap。 3.1 thymeleaf将网页模块化如图，页面目录如下： admin目录下的页面分别： listCategory.html: 显示所有书籍分类的列表 editCategory.html: 编辑书籍名字的页面 listBook.html: 显示分类下书籍列表的页面 listOrderBook.html: 显示每个用户下借阅书籍列表的页面 listOrderAll.html: 显示所有借阅的书籍的页面 listUser.html：显示所有用户列表的页面 login.html: 登录页面 include/admin目录下的页面分别为： adminHeader.html: 将所有前端页面中用到的一些函数统一写到了这个页面里 adminNavigator.html 基本每个页面都有的导航栏放在这个页面里 adminPage.html 分页跳转方法写在这个页面里 adminFooter.html 页脚 这样可以使得将页面中通用的部分单独拿出来，通过thymeleaf进行镶嵌 利用thymeleaf将include/admin中的页面嵌入到admin里的页面中，如下： &lt;!DOCTYPE html&gt; &lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; &lt;head th:include=&quot;include/admin/adminHeader::html(&apos;分类管理&apos;)&quot; &gt;&lt;/head&gt; //在head中插入adminHeader.html &lt;body&gt; &lt;div th:replace=&quot;include/admin/adminNavigator::html&quot; &gt;&lt;/div&gt; //在body的一开头插入导航栏adminNavigator.html &lt;div id=&quot;workingplace&quot;&gt; 此处省略一万行 &lt;div th:replace=&quot;include/admin/adminPage::html&quot; &gt;&lt;/div&gt; //插入分页 &lt;/div&gt; &lt;div th:replace=&quot;include/admin/adminFooter::html&quot; &gt;&lt;/div&gt; &lt;/body&gt; adminHeader内包含所需要的外部js文件已经css文件，代码如下： &lt;template th:fragment=&quot;html(title)&quot; &gt; &lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/vue/2.5.16/vue.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/axios/0.17.1/axios.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/moment/2.22.2/moment.js&quot;&gt;&lt;/script&gt; &lt;!-- vue.js 格式化日期用的 --&gt; &lt;link href=&quot;css/back/style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;script&gt; //判断是否为空 function checkEmpty(value,text){ if(null==value || value.length==0){ alert(text+ &quot;不能为空&quot;); return false; } return true; } ... //此处省略 ... &lt;/script&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title th:text=&quot;${title}&quot; &gt;&lt;/title&gt; &lt;/template&gt; template标签配合th:include可以实现加载template模板中的内容，template标签加载后自动忽略。而th:replace则是配合div标签自动将当前的div替换为th:replace的div标签 adminNavigator.html的代码 &lt;div class=&quot;navitagorDiv&quot; th:fragment=&quot;html&quot;&gt; &lt;nav class=&quot;navbar navbar-default navbar-fixed-top navbar-inverse&quot;&gt; &lt;div class=&quot;container-fluid&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;img style=&quot;margin-left:10px;margin-right:0px&quot; class=&quot;pull-left navbar-brand&quot; src=&quot;img/site/library.jpg&quot; height=&quot;45px&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_login&quot;&gt;图书馆管理后台&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_category_list&quot;&gt;分类管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_user_list&quot;&gt;用户管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_orderall_list&quot;&gt;借阅管理&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/div&gt; 分类列表中的代码片段： &lt;head th:include=&quot;include/admin/adminHeader::html(&apos;分类管理&apos;)&quot; &gt;&lt;/head&gt; &lt;body&gt; &lt;div th:replace=&quot;include/admin/adminNavigator::html&quot; &gt;&lt;/div&gt; 如上，通过镶嵌，这样每个页面就有一个导航栏 3.2 vue进行页面数据渲染以listCategory.hmtl书籍分类列表页面为例： 上图部分html代码如下： &lt;div id=&quot;workingArea&quot; &gt; &lt;div class=&quot;listDataTableDiv&quot;&gt; &lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; &lt;thead&gt; &lt;tr class=&quot;success&quot;&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;分类名称&lt;/th&gt; &lt;th&gt;书籍管理&lt;/th&gt; &lt;th&gt;编辑&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;bean in beans &quot;&gt; &lt;td&gt;{{bean.id}}&lt;/td&gt; &lt;td&gt; {{bean.name}} &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_book_list?cid=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_category_edit?id=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;deleteBean(bean.id)&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;table class=&quot;addTable&quot;&gt; &lt;tr&gt; &lt;td&gt;分类名称&lt;/td&gt; &lt;td&gt;&lt;input @keyup.enter=&quot;add&quot; v-model.trim=&quot;bean.name&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;submitTR&quot;&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;add&quot; class=&quot;btn btn-success&quot;&gt;提交&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div th:replace=&quot;include/admin/adminPage::html&quot; &gt;&lt;/div&gt; &lt;/div&gt; 由一个存放书籍列表的表格table，和一个显示添加书籍的表格组成。 vue脚本部分： &lt;script&gt; $(function(){ var data4Vue = { uri:&apos;categories&apos;, pagination:{}, beans: [], bean:{id:0,name:&quot;&quot;}, file:null, keyword:&apos;&apos; }; //ViewModel var vue = new Vue({ el: &apos;#workingArea&apos;, data: data4Vue, mounted:function(){ //mounted 表示这个 Vue 对象加载成功了 this.list(0); }, methods: { list:function(start){ var url = this.uri+ &quot;?start=&quot;+start; axios.get(url).then(function(response) { vue.pagination = response.data; vue.beans = response.data.content; }); }, listSearch:function () { var url = &quot;search?keyword=&quot;+vue.keyword; axios.post(url).then(function (response) { vue.beans = response.data; }) }, jump: function(page){ jump(page,vue); //定义在adminHeader.html 中 }, jumpByNumber: function(start){ jumpByNumber(start,vue); }, add: function () { var url = this.uri; axios.post(url,vue.bean).then(function () { vue.list(0); vue.bean = {id:0,name:&apos;&apos;,hp:&apos;0&apos;}; }) }, deleteBean:function (id) { if(!checkDeleteLink()) return; var url = this.uri+&quot;/&quot;+id; axios.delete(url).then(function (response) { if (0!=response.data.length) //rest规范删除数据要求要会返回空字符串（控制器中delete返回null），所以进行判断 alert(response.data); else vue.list(0); //是空字符串则调第一页 }) } } }); }); &lt;/script&gt; 页面渲染流程如下： 其中： $()是jquery中的用法，表示页面html文档加载完毕后自动执行里面的脚本。 $(function () {。。。}) var data4Vue是vue中定义的数据变量，也可以直接写在vue对象里 var data4Vue = { uri:&apos;categories&apos;, pagination:{}, beans: [], bean:{id:0,name:&quot;&quot;}, keyword:&apos;&apos; }; vue里的el:#workingArea表示该vue对象是对id为workingArea的html标签区域进行数据渲染 mounted表示对象加载完毕时自动执行mounted里面的函数 methods在里面编写页面所需要的函数 methods里的list函数中 list:function(start){ var url = this.uri+ &quot;?start=&quot;+start; axios.get(url).then(function(response) { vue.pagination = response.data; vue.beans = response.data.content; }); }, url为请求的地址，？后面为请求参数，服务器后端程序能通过注解自动识别？后的参数。 axios请求函数可以是get，post，delete等依情况定，请求成功后才会执行then里面的函数。then里面函数将返回的数据赋值给vue的数据变量中，vue通过在html标签中绑定的数据变量从而将数据渲染到页面中(请求的具体流程图在之后的后端部分给出)，如下，beans变量 &lt;tbody&gt; &lt;tr v-for=&quot;bean in beans &quot;&gt; &lt;td&gt;{{bean.id}}&lt;/td&gt; &lt;td&gt; {{bean.name}} &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_book_list?cid=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-shopping-cart&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a :href=&quot;&apos;admin_category_edit?id=&apos; + bean.id &quot;&gt;&lt;span class=&quot;glyphicon glyphicon-edit&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &lt;a href=&quot;#nowhere&quot; @click=&quot;deleteBean(bean.id)&quot;&gt;&lt;span class=&quot; glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt;&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; 输入框等表单用v-model双向绑定，即输入的内容会绑定到v-model后的数据变量里，同时数据变量值的改变也会改变表单中的值。 3.3页面样式样式主要采用bootstrap，在adminHeader.html引入 adminNavigator.html中导航栏样式 &lt;nav class=&quot;navbar navbar-default navbar-fixed-top navbar-inverse&quot;&gt; &lt;div class=&quot;navbar-header&quot;&gt; &lt;img style=&quot;margin-left:10px;margin-right:0px&quot; class=&quot;pull-left navbar-brand&quot; src=&quot;img/site/library.jpg&quot; height=&quot;45px&quot;&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_login&quot;&gt;图书馆管理后台&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_category_list&quot;&gt;分类管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;admin_user_list&quot;&gt;用户管理&lt;/a&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;/admin_orderall_list&quot;&gt;借阅管理&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt; nav标签中的属性navbar navbar-default nvarbar-fixed-top navbar-inverse分别就是bootstrap样式中的导航栏，导航栏默认样式，固定不随页面滑动，颜色反转（本来是白色的） 页面中展示数据的表格所用的样式： &lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&gt; &lt;tr class=&quot;success&quot;&gt; table：普通表格，table-striped：斑马线（颜色交替），table-border：列与列之间的分割线，table-hover：鼠标经过有效果，table-condensed：响应式效果，根据页面大小变换。行标签中有集中颜色可选，其中success为绿色 添加书籍分类的面板： &lt;div class=&quot;panel panel-warning addDiv&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt;新增分类&lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; ..... ... panel：一个面板, panel-warning：颜色警告色（黄色）panel-heading：面板标题，body为面板内容面板里的内容为一个2x2的table构成 登录页面登录页面采用bootstrap中的栅格化布局（网上物色的登录界面，在css中改了背景）。基本思想是bootstrap将页面分成了12份利用class属性col-lg-xx来配置个标签所占位置 ，如图：所以标题输入框以及按钮class中都设置超过6的数值就会一行的一行的排列。input中的required属性表示不能为空，autofocus表示页面加载后自动获得焦点 &lt;div id=&quot;form&quot;&gt; &lt;form&gt; &lt;div class=&quot;mycenter&quot;&gt; &lt;div class=&quot;mysign&quot;&gt; &lt;div class=&quot;col-lg-12 text-center text-info&quot;&gt; &lt;h2&gt; 图书馆管理系统 &lt;/h2&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-11&quot;&gt; &lt;input v-model=&quot;user.name&quot; type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;请输入账户名&quot; required autofocus/&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;input v-model=&quot;user.passWord&quot; type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入密码&quot; required/&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-lg-10&quot;&gt; &lt;button @click=&quot;login&quot; type=&quot;button&quot; id=&quot;btn&quot; class=&quot;btn btn-success col-lg-12&quot;&gt; 登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; 4.静态文件路径设置改写css，图片，以及前端框架js文件的路径到resource/webapp路径下，在idea中如下设置setting -&gt; project structure -&gt;facets设置web resource directory"},{"title":"Android界面基础","permalink":"https://www.miaomiaomiao.info/Android第一天/","text":"Android界面UI控制Android界面控制 xml布局文件配置 java代码中控制 混合控制 自定义view xml布局文件配置： Android工程目录的res/layout中编写xml(activity_main)布局文件 然后在activity中使用java代码显示xml布局文件 1setContentView(R.layout.activity_main) oncreate方法是activity页面创建时执行的方法。 完全使用java代码控制界面 用的较少 混合控制 少 总结安卓界面主要分工给xml配置文件来写，实现java代码主要实现业务逻辑，xml主要用于界面。"},{"title":"Tomcat服务器在eclipse中的配置","permalink":"https://www.miaomiaomiao.info/j2ee第一天/","text":"Tomcat服务器在eclipse中的配置 new-&gt;other-&gt;Dynamic Web Project 选择Tomcat服务器 工程目录如下： 在web-inf目录中创建web.xml，web-inf中的lib文件夹中存放需要用到的jar库，如servlet-api.jar等。"},{"title":"毕业前的暴饮暴食","permalink":"https://www.miaomiaomiao.info/愉快的一天/","text":"果然第二天拉肚子"},{"title":"P5天下第一!","permalink":"https://www.miaomiaomiao.info/P5天下第一/","text":"没什么好说的，p5天下第一"},{"title":"Hello World","permalink":"https://www.miaomiaomiao.info/hello-world/","text":""}]}